/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class ADefcan extends PDefcan
{
    private TDefine _define_;
    private TCanvas _canvas_;
    private TLPar _lPar_;
    private TNumber _width_;
    private TComma _comma_;
    private TNumber _height_;
    private TRPar _rPar_;
    private TSc _sc_;

    public ADefcan()
    {
        // Constructor
    }

    public ADefcan(
        @SuppressWarnings("hiding") TDefine _define_,
        @SuppressWarnings("hiding") TCanvas _canvas_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") TNumber _width_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") TNumber _height_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TSc _sc_)
    {
        // Constructor
        setDefine(_define_);

        setCanvas(_canvas_);

        setLPar(_lPar_);

        setWidth(_width_);

        setComma(_comma_);

        setHeight(_height_);

        setRPar(_rPar_);

        setSc(_sc_);

    }

    @Override
    public Object clone()
    {
        return new ADefcan(
            cloneNode(this._define_),
            cloneNode(this._canvas_),
            cloneNode(this._lPar_),
            cloneNode(this._width_),
            cloneNode(this._comma_),
            cloneNode(this._height_),
            cloneNode(this._rPar_),
            cloneNode(this._sc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADefcan(this);
    }

    public TDefine getDefine()
    {
        return this._define_;
    }

    public void setDefine(TDefine node)
    {
        if(this._define_ != null)
        {
            this._define_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._define_ = node;
    }

    public TCanvas getCanvas()
    {
        return this._canvas_;
    }

    public void setCanvas(TCanvas node)
    {
        if(this._canvas_ != null)
        {
            this._canvas_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._canvas_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public TNumber getWidth()
    {
        return this._width_;
    }

    public void setWidth(TNumber node)
    {
        if(this._width_ != null)
        {
            this._width_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._width_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public TNumber getHeight()
    {
        return this._height_;
    }

    public void setHeight(TNumber node)
    {
        if(this._height_ != null)
        {
            this._height_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._height_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TSc getSc()
    {
        return this._sc_;
    }

    public void setSc(TSc node)
    {
        if(this._sc_ != null)
        {
            this._sc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._define_)
            + toString(this._canvas_)
            + toString(this._lPar_)
            + toString(this._width_)
            + toString(this._comma_)
            + toString(this._height_)
            + toString(this._rPar_)
            + toString(this._sc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._define_ == child)
        {
            this._define_ = null;
            return;
        }

        if(this._canvas_ == child)
        {
            this._canvas_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._width_ == child)
        {
            this._width_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._height_ == child)
        {
            this._height_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._sc_ == child)
        {
            this._sc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._define_ == oldChild)
        {
            setDefine((TDefine) newChild);
            return;
        }

        if(this._canvas_ == oldChild)
        {
            setCanvas((TCanvas) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._width_ == oldChild)
        {
            setWidth((TNumber) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._height_ == oldChild)
        {
            setHeight((TNumber) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._sc_ == oldChild)
        {
            setSc((TSc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
