/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AFctDecl extends PDecl
{
    private PFctdecl _fctdecl_;
    private TSc _sc_;

    public AFctDecl()
    {
        // Constructor
    }

    public AFctDecl(
        @SuppressWarnings("hiding") PFctdecl _fctdecl_,
        @SuppressWarnings("hiding") TSc _sc_)
    {
        // Constructor
        setFctdecl(_fctdecl_);

        setSc(_sc_);

    }

    @Override
    public Object clone()
    {
        return new AFctDecl(
            cloneNode(this._fctdecl_),
            cloneNode(this._sc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFctDecl(this);
    }

    public PFctdecl getFctdecl()
    {
        return this._fctdecl_;
    }

    public void setFctdecl(PFctdecl node)
    {
        if(this._fctdecl_ != null)
        {
            this._fctdecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fctdecl_ = node;
    }

    public TSc getSc()
    {
        return this._sc_;
    }

    public void setSc(TSc node)
    {
        if(this._sc_ != null)
        {
            this._sc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fctdecl_)
            + toString(this._sc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fctdecl_ == child)
        {
            this._fctdecl_ = null;
            return;
        }

        if(this._sc_ == child)
        {
            this._sc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fctdecl_ == oldChild)
        {
            setFctdecl((PFctdecl) newChild);
            return;
        }

        if(this._sc_ == oldChild)
        {
            setSc((TSc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
