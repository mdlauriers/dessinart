/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private PDefs _defs_;
    private PMain _main_;
    private PDecls _decls_;

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") PDefs _defs_,
        @SuppressWarnings("hiding") PMain _main_,
        @SuppressWarnings("hiding") PDecls _decls_)
    {
        // Constructor
        setDefs(_defs_);

        setMain(_main_);

        setDecls(_decls_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._defs_),
            cloneNode(this._main_),
            cloneNode(this._decls_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PDefs getDefs()
    {
        return this._defs_;
    }

    public void setDefs(PDefs node)
    {
        if(this._defs_ != null)
        {
            this._defs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._defs_ = node;
    }

    public PMain getMain()
    {
        return this._main_;
    }

    public void setMain(PMain node)
    {
        if(this._main_ != null)
        {
            this._main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._main_ = node;
    }

    public PDecls getDecls()
    {
        return this._decls_;
    }

    public void setDecls(PDecls node)
    {
        if(this._decls_ != null)
        {
            this._decls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decls_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._defs_)
            + toString(this._main_)
            + toString(this._decls_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._defs_ == child)
        {
            this._defs_ = null;
            return;
        }

        if(this._main_ == child)
        {
            this._main_ = null;
            return;
        }

        if(this._decls_ == child)
        {
            this._decls_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._defs_ == oldChild)
        {
            setDefs((PDefs) newChild);
            return;
        }

        if(this._main_ == oldChild)
        {
            setMain((PMain) newChild);
            return;
        }

        if(this._decls_ == oldChild)
        {
            setDecls((PDecls) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
