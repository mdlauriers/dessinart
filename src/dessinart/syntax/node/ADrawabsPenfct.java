/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class ADrawabsPenfct extends PPenfct
{
    private TDrawTo _drawTo_;
    private TLPar _lPar_;
    private PExp _posX_;
    private TComma _comma_;
    private PExp _posY_;
    private TRPar _rPar_;

    public ADrawabsPenfct()
    {
        // Constructor
    }

    public ADrawabsPenfct(
        @SuppressWarnings("hiding") TDrawTo _drawTo_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExp _posX_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PExp _posY_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setDrawTo(_drawTo_);

        setLPar(_lPar_);

        setPosX(_posX_);

        setComma(_comma_);

        setPosY(_posY_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ADrawabsPenfct(
            cloneNode(this._drawTo_),
            cloneNode(this._lPar_),
            cloneNode(this._posX_),
            cloneNode(this._comma_),
            cloneNode(this._posY_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADrawabsPenfct(this);
    }

    public TDrawTo getDrawTo()
    {
        return this._drawTo_;
    }

    public void setDrawTo(TDrawTo node)
    {
        if(this._drawTo_ != null)
        {
            this._drawTo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._drawTo_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExp getPosX()
    {
        return this._posX_;
    }

    public void setPosX(PExp node)
    {
        if(this._posX_ != null)
        {
            this._posX_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._posX_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PExp getPosY()
    {
        return this._posY_;
    }

    public void setPosY(PExp node)
    {
        if(this._posY_ != null)
        {
            this._posY_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._posY_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._drawTo_)
            + toString(this._lPar_)
            + toString(this._posX_)
            + toString(this._comma_)
            + toString(this._posY_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._drawTo_ == child)
        {
            this._drawTo_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._posX_ == child)
        {
            this._posX_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._posY_ == child)
        {
            this._posY_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._drawTo_ == oldChild)
        {
            setDrawTo((TDrawTo) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._posX_ == oldChild)
        {
            setPosX((PExp) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._posY_ == oldChild)
        {
            setPosY((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
