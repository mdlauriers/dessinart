/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import java.util.*;
import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AArgs extends PArgs
{
    private PArg _arg_;
    private final LinkedList<PAdditionalArg> _additionalArg_ = new LinkedList<PAdditionalArg>();

    public AArgs()
    {
        // Constructor
    }

    public AArgs(
        @SuppressWarnings("hiding") PArg _arg_,
        @SuppressWarnings("hiding") List<?> _additionalArg_)
    {
        // Constructor
        setArg(_arg_);

        setAdditionalArg(_additionalArg_);

    }

    @Override
    public Object clone()
    {
        return new AArgs(
            cloneNode(this._arg_),
            cloneList(this._additionalArg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgs(this);
    }

    public PArg getArg()
    {
        return this._arg_;
    }

    public void setArg(PArg node)
    {
        if(this._arg_ != null)
        {
            this._arg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arg_ = node;
    }

    public LinkedList<PAdditionalArg> getAdditionalArg()
    {
        return this._additionalArg_;
    }

    public void setAdditionalArg(List<?> list)
    {
        for(PAdditionalArg e : this._additionalArg_)
        {
            e.parent(null);
        }
        this._additionalArg_.clear();

        for(Object obj_e : list)
        {
            PAdditionalArg e = (PAdditionalArg) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._additionalArg_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arg_)
            + toString(this._additionalArg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arg_ == child)
        {
            this._arg_ = null;
            return;
        }

        if(this._additionalArg_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arg_ == oldChild)
        {
            setArg((PArg) newChild);
            return;
        }

        for(ListIterator<PAdditionalArg> i = this._additionalArg_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalArg) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
