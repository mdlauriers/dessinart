/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AWaitPenfct extends PPenfct
{
    private TWait _wait_;
    private TLPar _lPar_;
    private PExp _delay_;
    private TRPar _rPar_;

    public AWaitPenfct()
    {
        // Constructor
    }

    public AWaitPenfct(
        @SuppressWarnings("hiding") TWait _wait_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExp _delay_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setWait(_wait_);

        setLPar(_lPar_);

        setDelay(_delay_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AWaitPenfct(
            cloneNode(this._wait_),
            cloneNode(this._lPar_),
            cloneNode(this._delay_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWaitPenfct(this);
    }

    public TWait getWait()
    {
        return this._wait_;
    }

    public void setWait(TWait node)
    {
        if(this._wait_ != null)
        {
            this._wait_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._wait_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExp getDelay()
    {
        return this._delay_;
    }

    public void setDelay(PExp node)
    {
        if(this._delay_ != null)
        {
            this._delay_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._delay_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._wait_)
            + toString(this._lPar_)
            + toString(this._delay_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._wait_ == child)
        {
            this._wait_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._delay_ == child)
        {
            this._delay_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._wait_ == oldChild)
        {
            setWait((TWait) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._delay_ == oldChild)
        {
            setDelay((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
