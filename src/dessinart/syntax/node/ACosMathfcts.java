/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class ACosMathfcts extends PMathfcts
{
    private TCos _cos_;
    private TLPar _lPar_;
    private PExp _angle_;
    private TRPar _rPar_;

    public ACosMathfcts()
    {
        // Constructor
    }

    public ACosMathfcts(
        @SuppressWarnings("hiding") TCos _cos_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExp _angle_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setCos(_cos_);

        setLPar(_lPar_);

        setAngle(_angle_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new ACosMathfcts(
            cloneNode(this._cos_),
            cloneNode(this._lPar_),
            cloneNode(this._angle_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACosMathfcts(this);
    }

    public TCos getCos()
    {
        return this._cos_;
    }

    public void setCos(TCos node)
    {
        if(this._cos_ != null)
        {
            this._cos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cos_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExp getAngle()
    {
        return this._angle_;
    }

    public void setAngle(PExp node)
    {
        if(this._angle_ != null)
        {
            this._angle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._angle_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cos_)
            + toString(this._lPar_)
            + toString(this._angle_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cos_ == child)
        {
            this._cos_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._angle_ == child)
        {
            this._angle_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cos_ == oldChild)
        {
            setCos((TCos) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._angle_ == oldChild)
        {
            setAngle((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
