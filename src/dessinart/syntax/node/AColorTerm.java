/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.node;

import dessinart.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AColorTerm extends PTerm
{
    private TLPar _lPar_;
    private PExp _red_;
    private TComma _comma1_;
    private PExp _green_;
    private TComma _comma2_;
    private PExp _blue_;
    private TRPar _rPar_;

    public AColorTerm()
    {
        // Constructor
    }

    public AColorTerm(
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExp _red_,
        @SuppressWarnings("hiding") TComma _comma1_,
        @SuppressWarnings("hiding") PExp _green_,
        @SuppressWarnings("hiding") TComma _comma2_,
        @SuppressWarnings("hiding") PExp _blue_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setLPar(_lPar_);

        setRed(_red_);

        setComma1(_comma1_);

        setGreen(_green_);

        setComma2(_comma2_);

        setBlue(_blue_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AColorTerm(
            cloneNode(this._lPar_),
            cloneNode(this._red_),
            cloneNode(this._comma1_),
            cloneNode(this._green_),
            cloneNode(this._comma2_),
            cloneNode(this._blue_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAColorTerm(this);
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExp getRed()
    {
        return this._red_;
    }

    public void setRed(PExp node)
    {
        if(this._red_ != null)
        {
            this._red_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._red_ = node;
    }

    public TComma getComma1()
    {
        return this._comma1_;
    }

    public void setComma1(TComma node)
    {
        if(this._comma1_ != null)
        {
            this._comma1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma1_ = node;
    }

    public PExp getGreen()
    {
        return this._green_;
    }

    public void setGreen(PExp node)
    {
        if(this._green_ != null)
        {
            this._green_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._green_ = node;
    }

    public TComma getComma2()
    {
        return this._comma2_;
    }

    public void setComma2(TComma node)
    {
        if(this._comma2_ != null)
        {
            this._comma2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma2_ = node;
    }

    public PExp getBlue()
    {
        return this._blue_;
    }

    public void setBlue(PExp node)
    {
        if(this._blue_ != null)
        {
            this._blue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blue_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lPar_)
            + toString(this._red_)
            + toString(this._comma1_)
            + toString(this._green_)
            + toString(this._comma2_)
            + toString(this._blue_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._red_ == child)
        {
            this._red_ = null;
            return;
        }

        if(this._comma1_ == child)
        {
            this._comma1_ = null;
            return;
        }

        if(this._green_ == child)
        {
            this._green_ = null;
            return;
        }

        if(this._comma2_ == child)
        {
            this._comma2_ = null;
            return;
        }

        if(this._blue_ == child)
        {
            this._blue_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._red_ == oldChild)
        {
            setRed((PExp) newChild);
            return;
        }

        if(this._comma1_ == oldChild)
        {
            setComma1((TComma) newChild);
            return;
        }

        if(this._green_ == oldChild)
        {
            setGreen((PExp) newChild);
            return;
        }

        if(this._comma2_ == oldChild)
        {
            setComma2((TComma) newChild);
            return;
        }

        if(this._blue_ == oldChild)
        {
            setBlue((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
