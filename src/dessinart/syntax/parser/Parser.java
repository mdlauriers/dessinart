/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.parser;

import dessinart.syntax.lexer.*;
import dessinart.syntax.node.*;
import dessinart.syntax.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ADefs */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ADefcan */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce ADefpen */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list, false);
            }
            break;
            case 4: /* reduce AMain */
            {
                ArrayList<Object> list = new4();
                push(goTo(4), list, false);
            }
            break;
            case 5: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new5();
                push(goTo(5), list, false);
            }
            break;
            case 6: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce ADeclInstr */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce AAssignInstr */
            {
                ArrayList<Object> list = new8();
                push(goTo(6), list, false);
            }
            break;
            case 9: /* reduce APenfctInstr */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list, false);
            }
            break;
            case 10: /* reduce AIfInstr */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AWhileInstr */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AAreturninstr1Instr */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AAreturninstr2Instr */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AAcallinstr1Instr */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AAcallinstr2Instr */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AReplacePenfct */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AMovePenfct */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce ADrawabsPenfct */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce ADrawPenfct */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce ASetcolorPenfct */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce ASetwidthPenfct */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce AAdecls1Decls */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AAdecls2Decls */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AFctDecl */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AVariableDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list, false);
            }
            break;
            case 26: /* reduce AVardecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, false);
            }
            break;
            case 27: /* reduce AFunctionFctdecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce ASketchFctdecl */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce AAdditionalParam */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AParam */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AEqExp */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce ALtExp */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AGtExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce ASimpleExp */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AAddSum */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce ASubSum */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce ADivSum */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AMulSum */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce ASimpleSum */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce ANotNeg */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce ATermNeg */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce ANumberTerm */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list, false);
            }
            break;
            case 45: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce ABoolTerm */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AParTerm */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce AColorTerm */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AMathfctsTerm */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce AAcallterm1Term */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list, false);
            }
            break;
            case 51: /* reduce AAcallterm2Term */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list, false);
            }
            break;
            case 52: /* reduce ATrueBoole */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce AFalseBoole */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, false);
            }
            break;
            case 54: /* reduce AIntType */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce AColorType */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list, false);
            }
            break;
            case 57: /* reduce AAargs1Args */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce AAargs2Args */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list, false);
            }
            break;
            case 59: /* reduce AAdditionalArg */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, false);
            }
            break;
            case 60: /* reduce AArg */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list, false);
            }
            break;
            case 61: /* reduce APowerMathfcts */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list, false);
            }
            break;
            case 62: /* reduce ARound5Mathfcts */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list, false);
            }
            break;
            case 63: /* reduce ARound10Mathfcts */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list, false);
            }
            break;
            case 64: /* reduce ARound100Mathfcts */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list, false);
            }
            break;
            case 65: /* reduce ALogMathfcts */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list, false);
            }
            break;
            case 66: /* reduce ASinMathfcts */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list, false);
            }
            break;
            case 67: /* reduce ACosMathfcts */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list, false);
            }
            break;
            case 68: /* reduce ATanMathfcts */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list, false);
            }
            break;
            case 69: /* reduce ATerminal$Instr */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$Instr */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list, true);
            }
            break;
            case 71: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new71();
                push(goTo(26), list, true);
            }
            break;
            case 72: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new72();
                push(goTo(26), list, true);
            }
            break;
            case 73: /* reduce ATerminal$AdditionalParam */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list, true);
            }
            break;
            case 74: /* reduce ANonTerminal$AdditionalParam */
            {
                ArrayList<Object> list = new74();
                push(goTo(27), list, true);
            }
            break;
            case 75: /* reduce ATerminal$AdditionalArg */
            {
                ArrayList<Object> list = new75();
                push(goTo(28), list, true);
            }
            break;
            case 76: /* reduce ANonTerminal$AdditionalArg */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDefs pdefsNode2;
        PMain pmainNode3;
        PDecls pdeclsNode4;
        pdefsNode2 = (PDefs)nodeArrayList1.get(0);
        pmainNode3 = (PMain)nodeArrayList2.get(0);
        pdeclsNode4 = (PDecls)nodeArrayList3.get(0);

        pprogramNode1 = new AProgram(pdefsNode2, pmainNode3, pdeclsNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ADefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefs pdefsNode1;
        {
            // Block
        PDefcan pdefcanNode2;
        PDefpen pdefpenNode3;
        pdefcanNode2 = (PDefcan)nodeArrayList1.get(0);
        pdefpenNode3 = (PDefpen)nodeArrayList2.get(0);

        pdefsNode1 = new ADefs(pdefcanNode2, pdefpenNode3);
        }
	nodeList.add(pdefsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADefcan */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefcan pdefcanNode1;
        {
            // Block
        TDefine tdefineNode2;
        TCanvas tcanvasNode3;
        TLPar tlparNode4;
        TNumber tnumberNode5;
        TComma tcommaNode6;
        TNumber tnumberNode7;
        TRPar trparNode8;
        TSc tscNode9;
        tdefineNode2 = (TDefine)nodeArrayList1.get(0);
        tcanvasNode3 = (TCanvas)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        tnumberNode7 = (TNumber)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);
        tscNode9 = (TSc)nodeArrayList8.get(0);

        pdefcanNode1 = new ADefcan(tdefineNode2, tcanvasNode3, tlparNode4, tnumberNode5, tcommaNode6, tnumberNode7, trparNode8, tscNode9);
        }
	nodeList.add(pdefcanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADefpen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefpen pdefpenNode1;
        {
            // Block
        TDefine tdefineNode2;
        TPencil tpencilNode3;
        TLPar tlparNode4;
        TNumber tnumberNode5;
        TComma tcommaNode6;
        TNumber tnumberNode7;
        TComma tcommaNode8;
        TNumber tnumberNode9;
        TRPar trparNode10;
        TSc tscNode11;
        tdefineNode2 = (TDefine)nodeArrayList1.get(0);
        tpencilNode3 = (TPencil)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        tnumberNode7 = (TNumber)nodeArrayList6.get(0);
        tcommaNode8 = (TComma)nodeArrayList7.get(0);
        tnumberNode9 = (TNumber)nodeArrayList8.get(0);
        trparNode10 = (TRPar)nodeArrayList9.get(0);
        tscNode11 = (TSc)nodeArrayList10.get(0);

        pdefpenNode1 = new ADefpen(tdefineNode2, tpencilNode3, tlparNode4, tnumberNode5, tcommaNode6, tnumberNode7, tcommaNode8, tnumberNode9, trparNode10, tscNode11);
        }
	nodeList.add(pdefpenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TDessinart tdessinartNode2;
        TLBr tlbrNode3;
        PBlock pblockNode4;
        TRBr trbrNode5;
        tdessinartNode2 = (TDessinart)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        pmainNode1 = new AMain(tdessinartNode2, tlbrNode3, pblockNode4, trbrNode5);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PBlock pblockNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pblockNode1 = new ABlock(listNode2);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pblockNode1 = new ABlock(listNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        TAssign tassignNode4;
        PExp pexpNode5;
        TSc tscNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tscNode6 = (TSc)nodeArrayList5.get(0);

        pinstrNode1 = new ADeclInstr(ptypeNode2, tidentNode3, tassignNode4, pexpNode5, tscNode6);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAssignInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TIdent tidentNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        TSc tscNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tscNode5 = (TSc)nodeArrayList4.get(0);

        pinstrNode1 = new AAssignInstr(tidentNode2, tassignNode3, pexpNode4, tscNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APenfctInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PPenfct ppenfctNode2;
        TSc tscNode3;
        ppenfctNode2 = (PPenfct)nodeArrayList1.get(0);
        tscNode3 = (TSc)nodeArrayList2.get(0);

        pinstrNode1 = new APenfctInstr(ppenfctNode2, tscNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIfInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        TLBr tlbrNode6;
        PBlock pblockNode7;
        TRBr trbrNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbrNode6 = (TLBr)nodeArrayList5.get(0);
        pblockNode7 = (PBlock)nodeArrayList6.get(0);
        trbrNode8 = (TRBr)nodeArrayList7.get(0);

        pinstrNode1 = new AIfInstr(tifNode2, tlparNode3, pexpNode4, trparNode5, tlbrNode6, pblockNode7, trbrNode8);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AWhileInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        TLBr tlbrNode6;
        PBlock pblockNode7;
        TRBr trbrNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbrNode6 = (TLBr)nodeArrayList5.get(0);
        pblockNode7 = (PBlock)nodeArrayList6.get(0);
        trbrNode8 = (TRBr)nodeArrayList7.get(0);

        pinstrNode1 = new AWhileInstr(twhileNode2, tlparNode3, pexpNode4, trparNode5, tlbrNode6, pblockNode7, trbrNode8);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAreturninstr1Instr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSc tscNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tscNode4 = (TSc)nodeArrayList2.get(0);

        pinstrNode1 = new AReturnInstr(treturnNode2, null, tscNode4);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAreturninstr2Instr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        TSc tscNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tscNode4 = (TSc)nodeArrayList3.get(0);

        pinstrNode1 = new AReturnInstr(treturnNode2, pexpNode3, tscNode4);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAcallinstr1Instr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pinstrNode1 = new ACallInstr(tidentNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAcallinstr2Instr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pinstrNode1 = new ACallInstr(tidentNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AReplacePenfct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPenfct ppenfctNode1;
        {
            // Block
        TReplace treplaceNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TComma tcommaNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        treplaceNode2 = (TReplace)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        ppenfctNode1 = new AReplacePenfct(treplaceNode2, tlparNode3, pexpNode4, tcommaNode5, pexpNode6, trparNode7);
        }
	nodeList.add(ppenfctNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AMovePenfct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPenfct ppenfctNode1;
        {
            // Block
        TMove tmoveNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TComma tcommaNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        tmoveNode2 = (TMove)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        ppenfctNode1 = new AMovePenfct(tmoveNode2, tlparNode3, pexpNode4, tcommaNode5, pexpNode6, trparNode7);
        }
	nodeList.add(ppenfctNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADrawabsPenfct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPenfct ppenfctNode1;
        {
            // Block
        TDrawTo tdrawtoNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TComma tcommaNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        tdrawtoNode2 = (TDrawTo)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        ppenfctNode1 = new ADrawabsPenfct(tdrawtoNode2, tlparNode3, pexpNode4, tcommaNode5, pexpNode6, trparNode7);
        }
	nodeList.add(ppenfctNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ADrawPenfct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPenfct ppenfctNode1;
        {
            // Block
        TDraw tdrawNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TComma tcommaNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        tdrawNode2 = (TDraw)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        ppenfctNode1 = new ADrawPenfct(tdrawNode2, tlparNode3, pexpNode4, tcommaNode5, pexpNode6, trparNode7);
        }
	nodeList.add(ppenfctNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASetcolorPenfct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPenfct ppenfctNode1;
        {
            // Block
        TSetColor tsetcolorNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        tsetcolorNode2 = (TSetColor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        ppenfctNode1 = new ASetcolorPenfct(tsetcolorNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(ppenfctNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASetwidthPenfct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPenfct ppenfctNode1;
        {
            // Block
        TSetWidth tsetwidthNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        tsetwidthNode2 = (TSetWidth)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        ppenfctNode1 = new ASetwidthPenfct(tsetwidthNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(ppenfctNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAdecls1Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDecls pdeclsNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pdeclsNode1 = new ADecls(listNode2);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAdecls2Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdeclsNode1 = new ADecls(listNode3);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFctDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PFctdecl pfctdeclNode2;
        TSc tscNode3;
        pfctdeclNode2 = (PFctdecl)nodeArrayList1.get(0);
        tscNode3 = (TSc)nodeArrayList2.get(0);

        pdeclNode1 = new AFctDecl(pfctdeclNode2, tscNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AVariableDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PVardecl pvardeclNode2;
        TSc tscNode3;
        pvardeclNode2 = (PVardecl)nodeArrayList1.get(0);
        tscNode3 = (TSc)nodeArrayList2.get(0);

        pdeclNode1 = new AVariableDecl(pvardeclNode2, tscNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AVardecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVardecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        TAssign tassignNode4;
        PExp pexpNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);

        pvardeclNode1 = new AVardecl(ptypeNode2, tidentNode3, tassignNode4, pexpNode5);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFunctionFctdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFctdecl pfctdeclNode1;
        {
            // Block
        TFunc tfuncNode2;
        PType ptypeNode3;
        TIdent tidentNode4;
        TLPar tlparNode5;
        PParams pparamsNode6;
        TRPar trparNode7;
        TLBr tlbrNode8;
        PBlock pblockNode9;
        TRBr trbrNode10;
        tfuncNode2 = (TFunc)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pparamsNode6 = (PParams)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tlbrNode8 = (TLBr)nodeArrayList7.get(0);
        pblockNode9 = (PBlock)nodeArrayList8.get(0);
        trbrNode10 = (TRBr)nodeArrayList9.get(0);

        pfctdeclNode1 = new AFunctionFctdecl(tfuncNode2, ptypeNode3, tidentNode4, tlparNode5, pparamsNode6, trparNode7, tlbrNode8, pblockNode9, trbrNode10);
        }
	nodeList.add(pfctdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASketchFctdecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFctdecl pfctdeclNode1;
        {
            // Block
        TSketch tsketchNode2;
        TIdent tidentNode3;
        TLPar tlparNode4;
        PParams pparamsNode5;
        TRPar trparNode6;
        TLBr tlbrNode7;
        PBlock pblockNode8;
        TRBr trbrNode9;
        tsketchNode2 = (TSketch)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbrNode7 = (TLBr)nodeArrayList6.get(0);
        pblockNode8 = (PBlock)nodeArrayList7.get(0);
        trbrNode9 = (TRBr)nodeArrayList8.get(0);

        pfctdeclNode1 = new ASketchFctdecl(tsketchNode2, tidentNode3, tlparNode4, pparamsNode5, trparNode6, tlbrNode7, pblockNode8, trbrNode9);
        }
	nodeList.add(pfctdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(pparamNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(pparamNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalParam padditionalparamNode1;
        {
            // Block
        TComma tcommaNode2;
        PParam pparamNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);

        padditionalparamNode1 = new AAdditionalParam(tcommaNode2, pparamNode3);
        }
	nodeList.add(padditionalparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pparamNode1 = new AParam(ptypeNode2, tidentNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEqExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TEq teqNode3;
        PSum psumNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        psumNode4 = (PSum)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, teqNode3, psumNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLt tltNode3;
        PSum psumNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        psumNode4 = (PSum)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, tltNode3, psumNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AGtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGt tgtNode3;
        PSum psumNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        psumNode4 = (PSum)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, tgtNode3, psumNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASimpleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PSum psumNode2;
        psumNode2 = (PSum)nodeArrayList1.get(0);

        pexpNode1 = new ASimpleExp(psumNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAddSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSum psumNode1;
        {
            // Block
        PSum psumNode2;
        TPlus tplusNode3;
        PNeg pnegNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pnegNode4 = (PNeg)nodeArrayList3.get(0);

        psumNode1 = new AAddSum(psumNode2, tplusNode3, pnegNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASubSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSum psumNode1;
        {
            // Block
        PSum psumNode2;
        TMinus tminusNode3;
        PNeg pnegNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pnegNode4 = (PNeg)nodeArrayList3.get(0);

        psumNode1 = new ASubSum(psumNode2, tminusNode3, pnegNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADivSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSum psumNode1;
        {
            // Block
        PSum psumNode2;
        TDivide tdivideNode3;
        PNeg pnegNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tdivideNode3 = (TDivide)nodeArrayList2.get(0);
        pnegNode4 = (PNeg)nodeArrayList3.get(0);

        psumNode1 = new ADivSum(psumNode2, tdivideNode3, pnegNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMulSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSum psumNode1;
        {
            // Block
        PSum psumNode2;
        TStar tstarNode3;
        PNeg pnegNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pnegNode4 = (PNeg)nodeArrayList3.get(0);

        psumNode1 = new AMulSum(psumNode2, tstarNode3, pnegNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASimpleSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSum psumNode1;
        {
            // Block
        PNeg pnegNode2;
        pnegNode2 = (PNeg)nodeArrayList1.get(0);

        psumNode1 = new ASimpleSum(pnegNode2);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANotNeg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNeg pnegNode1;
        {
            // Block
        TNot tnotNode2;
        PNeg pnegNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pnegNode3 = (PNeg)nodeArrayList2.get(0);

        pnegNode1 = new ANotNeg(tnotNode2, pnegNode3);
        }
	nodeList.add(pnegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATermNeg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNeg pnegNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pnegNode1 = new ATermNeg(ptermNode2);
        }
	nodeList.add(pnegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(tidentNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ABoolTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PBoole pbooleNode2;
        pbooleNode2 = (PBoole)nodeArrayList1.get(0);

        ptermNode1 = new ABoolTerm(pbooleNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AParTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParTerm(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AColorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TComma tcommaNode4;
        PExp pexpNode5;
        TComma tcommaNode6;
        PExp pexpNode7;
        TRPar trparNode8;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tcommaNode4 = (TComma)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);

        ptermNode1 = new AColorTerm(tlparNode2, pexpNode3, tcommaNode4, pexpNode5, tcommaNode6, pexpNode7, trparNode8);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMathfctsTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PMathfcts pmathfctsNode2;
        pmathfctsNode2 = (PMathfcts)nodeArrayList1.get(0);

        ptermNode1 = new AMathfctsTerm(pmathfctsNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAcallterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new ACallTerm(tidentNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAcallterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        ptermNode1 = new ACallTerm(tidentNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATrueBoole */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoole pbooleNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleNode1 = new ATrueBoole(ttrueNode2);
        }
	nodeList.add(pbooleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AFalseBoole */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoole pbooleNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleNode1 = new AFalseBoole(tfalseNode2);
        }
	nodeList.add(pbooleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AColorType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TColor tcolorNode2;
        tcolorNode2 = (TColor)nodeArrayList1.get(0);

        ptypeNode1 = new AColorType(tcolorNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pargNode2 = (PArg)nodeArrayList1.get(0);
        {
            // Block
        }

        pargsNode1 = new AArgs(pargNode2, listNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pargNode2 = (PArg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargsNode1 = new AArgs(pargNode2, listNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalArg padditionalargNode1;
        {
            // Block
        TComma tcommaNode2;
        PArg pargNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pargNode3 = (PArg)nodeArrayList2.get(0);

        padditionalargNode1 = new AAdditionalArg(tcommaNode2, pargNode3);
        }
	nodeList.add(padditionalargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pargNode1 = new AArg(pexpNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce APowerMathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TPower tpowerNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TComma tcommaNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        tpowerNode2 = (TPower)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pmathfctsNode1 = new APowerMathfcts(tpowerNode2, tlparNode3, pexpNode4, tcommaNode5, pexpNode6, trparNode7);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ARound5Mathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TRoundfive troundfiveNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        troundfiveNode2 = (TRoundfive)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmathfctsNode1 = new ARound5Mathfcts(troundfiveNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ARound10Mathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TRoundten troundtenNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        troundtenNode2 = (TRoundten)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmathfctsNode1 = new ARound10Mathfcts(troundtenNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ARound100Mathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TRoundhund troundhundNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        troundhundNode2 = (TRoundhund)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmathfctsNode1 = new ARound100Mathfcts(troundhundNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ALogMathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TLog tlogNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TComma tcommaNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        tlogNode2 = (TLog)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pmathfctsNode1 = new ALogMathfcts(tlogNode2, tlparNode3, pexpNode4, tcommaNode5, pexpNode6, trparNode7);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ASinMathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TSin tsinNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        tsinNode2 = (TSin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmathfctsNode1 = new ASinMathfcts(tsinNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ACosMathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TCos tcosNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        tcosNode2 = (TCos)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmathfctsNode1 = new ACosMathfcts(tcosNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATanMathfcts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMathfcts pmathfctsNode1;
        {
            // Block
        TTan ttanNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        ttanNode2 = (TTan)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmathfctsNode1 = new ATanMathfcts(ttanNode2, tlparNode3, pexpNode4, trparNode5);
        }
	nodeList.add(pmathfctsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$Instr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInstr pinstrNode1;
        pinstrNode1 = (PInstr)nodeArrayList1.get(0);
	if(pinstrNode1 != null)
	{
	  listNode2.add(pinstrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$Instr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInstr pinstrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstrNode2 = (PInstr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstrNode2 != null)
	{
	  listNode3.add(pinstrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalParam padditionalparamNode1;
        padditionalparamNode1 = (PAdditionalParam)nodeArrayList1.get(0);
	if(padditionalparamNode1 != null)
	{
	  listNode2.add(padditionalparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalParam padditionalparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalparamNode2 = (PAdditionalParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalparamNode2 != null)
	{
	  listNode3.add(padditionalparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalArg padditionalargNode1;
        padditionalargNode1 = (PAdditionalArg)nodeArrayList1.get(0);
	if(padditionalargNode1 != null)
	{
	  listNode2.add(padditionalargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalArg padditionalargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalargNode2 = (PAdditionalArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalargNode2 != null)
	{
	  listNode3.add(padditionalargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {29, SHIFT, 1}, },
			{{-1, ERROR, 1}, {26, SHIFT, 5}, },
			{{-1, ERROR, 2}, {53, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {31, SHIFT, 6}, },
			{{-1, ERROR, 4}, {29, SHIFT, 8}, },
			{{-1, ERROR, 5}, {3, SHIFT, 10}, },
			{{-1, ERROR, 6}, {2, SHIFT, 11}, },
			{{-1, REDUCE, 22}, {28, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {34, SHIFT, 15}, {36, SHIFT, 16}, },
			{{-1, ERROR, 8}, {27, SHIFT, 23}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 10}, {52, SHIFT, 24}, },
			{{-1, REDUCE, 5}, {19, SHIFT, 25}, {23, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 28}, {38, SHIFT, 29}, {39, SHIFT, 30}, {40, SHIFT, 31}, {41, SHIFT, 32}, {42, SHIFT, 33}, {51, SHIFT, 34}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 13}, {51, SHIFT, 40}, },
			{{-1, ERROR, 14}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 19}, {9, SHIFT, 42}, },
			{{-1, ERROR, 20}, {9, SHIFT, 43}, },
			{{-1, ERROR, 21}, {51, SHIFT, 44}, },
			{{-1, REDUCE, 23}, {28, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {34, SHIFT, 15}, {36, SHIFT, 16}, },
			{{-1, ERROR, 23}, {3, SHIFT, 46}, },
			{{-1, ERROR, 24}, {10, SHIFT, 47}, },
			{{-1, ERROR, 25}, {3, SHIFT, 48}, },
			{{-1, ERROR, 26}, {3, SHIFT, 49}, },
			{{-1, ERROR, 27}, {3, SHIFT, 50}, {9, SHIFT, 51}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 28}, {3, SHIFT, 71}, },
			{{-1, ERROR, 29}, {3, SHIFT, 72}, },
			{{-1, ERROR, 30}, {3, SHIFT, 73}, },
			{{-1, ERROR, 31}, {3, SHIFT, 74}, },
			{{-1, ERROR, 32}, {3, SHIFT, 75}, },
			{{-1, ERROR, 33}, {3, SHIFT, 76}, },
			{{-1, ERROR, 34}, {0, SHIFT, 77}, {3, SHIFT, 78}, },
			{{-1, ERROR, 35}, {6, SHIFT, 79}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 37}, {9, SHIFT, 80}, },
			{{-1, ERROR, 38}, {51, SHIFT, 81}, },
			{{-1, REDUCE, 6}, {19, SHIFT, 25}, {23, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 28}, {38, SHIFT, 29}, {39, SHIFT, 30}, {40, SHIFT, 31}, {41, SHIFT, 32}, {42, SHIFT, 33}, {51, SHIFT, 34}, },
			{{-1, ERROR, 40}, {3, SHIFT, 83}, },
			{{-1, ERROR, 41}, {51, SHIFT, 84}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 44}, {0, SHIFT, 85}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 46}, {52, SHIFT, 86}, },
			{{-1, ERROR, 47}, {52, SHIFT, 87}, },
			{{-1, ERROR, 48}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 49}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 50}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 52}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 55}, {3, SHIFT, 92}, },
			{{-1, ERROR, 56}, {3, SHIFT, 93}, },
			{{-1, ERROR, 57}, {3, SHIFT, 94}, },
			{{-1, ERROR, 58}, {3, SHIFT, 95}, },
			{{-1, ERROR, 59}, {3, SHIFT, 96}, },
			{{-1, ERROR, 60}, {3, SHIFT, 97}, },
			{{-1, ERROR, 61}, {3, SHIFT, 98}, },
			{{-1, ERROR, 62}, {3, SHIFT, 99}, },
			{{-1, REDUCE, 45}, {3, SHIFT, 100}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 65}, {9, SHIFT, 101}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 36}, {1, SHIFT, 105}, {4, SHIFT, 106}, {5, SHIFT, 107}, {8, SHIFT, 108}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 71}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 72}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 73}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 74}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 75}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 76}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 77}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 78}, {3, SHIFT, 50}, {7, SHIFT, 116}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 81}, {0, SHIFT, 120}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 83}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, },
			{{-1, ERROR, 84}, {3, SHIFT, 124}, },
			{{-1, ERROR, 85}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 86}, {10, SHIFT, 126}, },
			{{-1, ERROR, 87}, {7, SHIFT, 127}, },
			{{-1, ERROR, 88}, {7, SHIFT, 128}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 89}, {7, SHIFT, 129}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 90}, {7, SHIFT, 130}, {10, SHIFT, 131}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 92}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 93}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 94}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 95}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 96}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 97}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 98}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 99}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 100}, {3, SHIFT, 50}, {7, SHIFT, 140}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 102}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 103}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 104}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 105}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 106}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 107}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 108}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 109}, {10, SHIFT, 149}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 110}, {10, SHIFT, 150}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 111}, {10, SHIFT, 151}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 112}, {10, SHIFT, 152}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 113}, {7, SHIFT, 153}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 114}, {7, SHIFT, 154}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 115}, {9, SHIFT, 155}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 60}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 118}, {7, SHIFT, 156}, },
			{{-1, REDUCE, 57}, {10, SHIFT, 157}, },
			{{-1, ERROR, 120}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 121}, {7, SHIFT, 161}, },
			{{-1, REDUCE, 29}, {10, SHIFT, 162}, },
			{{-1, ERROR, 123}, {51, SHIFT, 165}, },
			{{-1, ERROR, 124}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, },
			{{-1, REDUCE, 26}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 126}, {52, SHIFT, 167}, },
			{{-1, ERROR, 127}, {9, SHIFT, 168}, },
			{{-1, ERROR, 128}, {2, SHIFT, 169}, },
			{{-1, ERROR, 129}, {2, SHIFT, 170}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 131}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 132}, {10, SHIFT, 172}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 133}, {7, SHIFT, 173}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 134}, {7, SHIFT, 174}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 135}, {7, SHIFT, 175}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 136}, {7, SHIFT, 176}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 137}, {7, SHIFT, 177}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 138}, {7, SHIFT, 178}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 139}, {10, SHIFT, 179}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 141}, {7, SHIFT, 180}, },
			{{-1, REDUCE, 33}, {1, SHIFT, 105}, {4, SHIFT, 106}, {5, SHIFT, 107}, {8, SHIFT, 108}, },
			{{-1, REDUCE, 34}, {1, SHIFT, 105}, {4, SHIFT, 106}, {5, SHIFT, 107}, {8, SHIFT, 108}, },
			{{-1, REDUCE, 35}, {1, SHIFT, 105}, {4, SHIFT, 106}, {5, SHIFT, 107}, {8, SHIFT, 108}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 149}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 150}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 151}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 152}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 157}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 157}, },
			{{-1, ERROR, 160}, {9, SHIFT, 187}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 161}, {2, SHIFT, 188}, },
			{{-1, ERROR, 162}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 30}, {10, SHIFT, 162}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 166}, {7, SHIFT, 191}, },
			{{-1, ERROR, 167}, {10, SHIFT, 192}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 5}, {19, SHIFT, 25}, {23, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 28}, {38, SHIFT, 29}, {39, SHIFT, 30}, {40, SHIFT, 31}, {41, SHIFT, 32}, {42, SHIFT, 33}, {51, SHIFT, 34}, },
			{{-1, REDUCE, 5}, {19, SHIFT, 25}, {23, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 28}, {38, SHIFT, 29}, {39, SHIFT, 30}, {40, SHIFT, 31}, {41, SHIFT, 32}, {42, SHIFT, 33}, {51, SHIFT, 34}, },
			{{-1, ERROR, 171}, {10, SHIFT, 195}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 172}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 179}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 181}, {7, SHIFT, 198}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 182}, {7, SHIFT, 199}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 183}, {7, SHIFT, 200}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 184}, {7, SHIFT, 201}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, {19, SHIFT, 25}, {23, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 28}, {38, SHIFT, 29}, {39, SHIFT, 30}, {40, SHIFT, 31}, {41, SHIFT, 32}, {42, SHIFT, 33}, {51, SHIFT, 34}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 191}, {2, SHIFT, 203}, },
			{{-1, ERROR, 192}, {52, SHIFT, 204}, },
			{{-1, ERROR, 193}, {6, SHIFT, 205}, },
			{{-1, ERROR, 194}, {6, SHIFT, 206}, },
			{{-1, ERROR, 195}, {3, SHIFT, 50}, {12, SHIFT, 52}, {20, SHIFT, 53}, {21, SHIFT, 54}, {43, SHIFT, 55}, {44, SHIFT, 56}, {45, SHIFT, 57}, {46, SHIFT, 58}, {47, SHIFT, 59}, {48, SHIFT, 60}, {49, SHIFT, 61}, {50, SHIFT, 62}, {51, SHIFT, 63}, {52, SHIFT, 64}, },
			{{-1, ERROR, 196}, {7, SHIFT, 208}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, ERROR, 197}, {7, SHIFT, 209}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 202}, {6, SHIFT, 210}, },
			{{-1, REDUCE, 5}, {19, SHIFT, 25}, {23, SHIFT, 26}, {25, SHIFT, 27}, {28, SHIFT, 12}, {34, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 28}, {38, SHIFT, 29}, {39, SHIFT, 30}, {40, SHIFT, 31}, {41, SHIFT, 32}, {42, SHIFT, 33}, {51, SHIFT, 34}, },
			{{-1, ERROR, 204}, {7, SHIFT, 212}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 207}, {7, SHIFT, 213}, {13, SHIFT, 102}, {14, SHIFT, 103}, {15, SHIFT, 104}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 211}, {6, SHIFT, 214}, },
			{{-1, ERROR, 212}, {9, SHIFT, 215}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 3}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, },
			{{-1, 9}, },
			{{-1, 7}, },
			{{-1, 35}, {169, 193}, {170, 194}, {188, 202}, {203, 211}, },
			{{-1, 36}, {39, 82}, },
			{{-1, 37}, },
			{{-1, 17}, },
			{{-1, 18}, {22, 45}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 121}, {124, 166}, },
			{{-1, 163}, {164, 190}, },
			{{-1, 122}, {162, 189}, },
			{{-1, 117}, {27, 65}, {48, 88}, {49, 89}, {50, 90}, {71, 109}, {72, 110}, {73, 111}, {74, 112}, {75, 113}, {76, 114}, {77, 115}, {85, 125}, {92, 132}, {93, 133}, {94, 134}, {95, 135}, {96, 136}, {97, 137}, {98, 138}, {99, 139}, {120, 160}, {131, 171}, {149, 181}, {150, 182}, {151, 183}, {152, 184}, {172, 196}, {179, 197}, {195, 207}, },
			{{-1, 66}, {102, 142}, {103, 143}, {104, 144}, },
			{{-1, 67}, {52, 91}, {105, 145}, {106, 146}, {107, 147}, {108, 148}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 38}, {7, 21}, {14, 41}, {22, 21}, {83, 123}, {124, 123}, {162, 123}, },
			{{-1, 118}, {100, 141}, },
			{{-1, 158}, {159, 186}, },
			{{-1, 119}, {157, 185}, },
			{{-1, 70}, },
			{{-1, 39}, },
			{{-1, 22}, },
			{{-1, 164}, },
			{{-1, 159}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'define'",
			"expecting: 'canvas'",
			"expecting: EOF",
			"expecting: 'dessinart'",
			"expecting: '('",
			"expecting: '{'",
			"expecting: 'color', 'sketch', 'func', 'int', 'boolean', EOF",
			"expecting: 'pencil'",
			"expecting: number",
			"expecting: '}', 'while', 'if', 'return', 'color', 'int', 'boolean', 'replace', 'move', 'draw', 'drawTo', 'setColor', 'setWidth', ident",
			"expecting: ident",
			"expecting: 'color', 'int', 'boolean'",
			"expecting: ';'",
			"expecting: ','",
			"expecting: '(', ';', '!', 'false', 'true', 'power', 'roundFive', 'roundTen', 'roundHundred', 'sin', 'cos', 'tan', 'log', ident, number",
			"expecting: '=', '('",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '(', '!', 'false', 'true', 'power', 'roundFive', 'roundTen', 'roundHundred', 'sin', 'cos', 'tan', 'log', ident, number",
			"expecting: '/', '-', '+', ')', '*', ';', ',', '==', '<', '>'",
			"expecting: '/', '(', '-', '+', ')', '*', ';', ',', '==', '<', '>'",
			"expecting: ';', '==', '<', '>'",
			"expecting: '(', ')', '!', 'false', 'true', 'power', 'roundFive', 'roundTen', 'roundHundred', 'sin', 'cos', 'tan', 'log', ident, number",
			"expecting: ')'",
			"expecting: ')', '==', '<', '>'",
			"expecting: ')', ',', '==', '<', '>'",
			"expecting: ',', '==', '<', '>'",
			"expecting: ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 4, 5, 6, 7, 3, 8, 9, 10, 10, 11, 10, 10, 2, 6, 12, 12, 10, 6, 4, 13, 4, 4, 14, 4, 4, 4, 4, 4, 4, 15, 16, 9, 12, 10, 9, 4, 10, 6, 6, 17, 6, 8, 8, 18, 18, 18, 9, 18, 19, 19, 4, 4, 4, 4, 4, 4, 4, 4, 20, 19, 21, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 22, 6, 9, 17, 9, 11, 4, 18, 13, 23, 24, 24, 25, 19, 18, 18, 18, 18, 18, 18, 18, 18, 22, 9, 18, 18, 18, 18, 18, 18, 18, 26, 26, 26, 26, 24, 24, 21, 9, 25, 23, 27, 18, 23, 27, 10, 11, 21, 8, 12, 5, 5, 19, 18, 26, 24, 24, 24, 24, 24, 24, 26, 19, 23, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 12, 12, 9, 9, 18, 27, 27, 21, 5, 11, 27, 27, 27, 23, 13, 0, 9, 9, 26, 18, 19, 19, 19, 19, 19, 19, 18, 19, 24, 24, 24, 24, 27, 27, 9, 9, 27, 27, 5, 8, 16, 16, 18, 24, 24, 12, 12, 12, 12, 16, 9, 23, 9, 9, 24, 19, 19, 12, 16, 12, 19, 12, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
