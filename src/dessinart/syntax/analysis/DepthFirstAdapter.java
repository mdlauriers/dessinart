/* This file was generated by SableCC (http://www.sablecc.org/). */

package dessinart.syntax.analysis;

import java.util.*;
import dessinart.syntax.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDefs() != null)
        {
            node.getDefs().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        outAProgram(node);
    }

    public void inADefs(ADefs node)
    {
        defaultIn(node);
    }

    public void outADefs(ADefs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefs(ADefs node)
    {
        inADefs(node);
        if(node.getDefcan() != null)
        {
            node.getDefcan().apply(this);
        }
        if(node.getDefpen() != null)
        {
            node.getDefpen().apply(this);
        }
        outADefs(node);
    }

    public void inADefcan(ADefcan node)
    {
        defaultIn(node);
    }

    public void outADefcan(ADefcan node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefcan(ADefcan node)
    {
        inADefcan(node);
        if(node.getDefine() != null)
        {
            node.getDefine().apply(this);
        }
        if(node.getCanvas() != null)
        {
            node.getCanvas().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outADefcan(node);
    }

    public void inADefpen(ADefpen node)
    {
        defaultIn(node);
    }

    public void outADefpen(ADefpen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefpen(ADefpen node)
    {
        inADefpen(node);
        if(node.getDefine() != null)
        {
            node.getDefine().apply(this);
        }
        if(node.getPencil() != null)
        {
            node.getPencil().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getComma1() != null)
        {
            node.getComma1().apply(this);
        }
        if(node.getPosx() != null)
        {
            node.getPosx().apply(this);
        }
        if(node.getComma2() != null)
        {
            node.getComma2().apply(this);
        }
        if(node.getPosy() != null)
        {
            node.getPosy().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outADefpen(node);
    }

    public void inAMain(AMain node)
    {
        defaultIn(node);
    }

    public void outAMain(AMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMain(AMain node)
    {
        inAMain(node);
        if(node.getDessinart() != null)
        {
            node.getDessinart().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAMain(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        {
            List<PInstr> copy = new ArrayList<PInstr>(node.getInstrs());
            for(PInstr e : copy)
            {
                e.apply(this);
            }
        }
        outABlock(node);
    }

    public void inADeclInstr(ADeclInstr node)
    {
        defaultIn(node);
    }

    public void outADeclInstr(ADeclInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclInstr(ADeclInstr node)
    {
        inADeclInstr(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outADeclInstr(node);
    }

    public void inAAssignInstr(AAssignInstr node)
    {
        defaultIn(node);
    }

    public void outAAssignInstr(AAssignInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignInstr(AAssignInstr node)
    {
        inAAssignInstr(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outAAssignInstr(node);
    }

    public void inAPenfctInstr(APenfctInstr node)
    {
        defaultIn(node);
    }

    public void outAPenfctInstr(APenfctInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPenfctInstr(APenfctInstr node)
    {
        inAPenfctInstr(node);
        if(node.getPenfct() != null)
        {
            node.getPenfct().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outAPenfctInstr(node);
    }

    public void inAIfInstr(AIfInstr node)
    {
        defaultIn(node);
    }

    public void outAIfInstr(AIfInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfInstr(AIfInstr node)
    {
        inAIfInstr(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAIfInstr(node);
    }

    public void inAWhileInstr(AWhileInstr node)
    {
        defaultIn(node);
    }

    public void outAWhileInstr(AWhileInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileInstr(AWhileInstr node)
    {
        inAWhileInstr(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAWhileInstr(node);
    }

    public void inAReturnInstr(AReturnInstr node)
    {
        defaultIn(node);
    }

    public void outAReturnInstr(AReturnInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnInstr(AReturnInstr node)
    {
        inAReturnInstr(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outAReturnInstr(node);
    }

    public void inACallInstr(ACallInstr node)
    {
        defaultIn(node);
    }

    public void outACallInstr(ACallInstr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallInstr(ACallInstr node)
    {
        inACallInstr(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACallInstr(node);
    }

    public void inAReplacePenfct(AReplacePenfct node)
    {
        defaultIn(node);
    }

    public void outAReplacePenfct(AReplacePenfct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReplacePenfct(AReplacePenfct node)
    {
        inAReplacePenfct(node);
        if(node.getReplace() != null)
        {
            node.getReplace().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPosX() != null)
        {
            node.getPosX().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPosY() != null)
        {
            node.getPosY().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAReplacePenfct(node);
    }

    public void inAMovePenfct(AMovePenfct node)
    {
        defaultIn(node);
    }

    public void outAMovePenfct(AMovePenfct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMovePenfct(AMovePenfct node)
    {
        inAMovePenfct(node);
        if(node.getMove() != null)
        {
            node.getMove().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getDistX() != null)
        {
            node.getDistX().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDistY() != null)
        {
            node.getDistY().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMovePenfct(node);
    }

    public void inADrawabsPenfct(ADrawabsPenfct node)
    {
        defaultIn(node);
    }

    public void outADrawabsPenfct(ADrawabsPenfct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADrawabsPenfct(ADrawabsPenfct node)
    {
        inADrawabsPenfct(node);
        if(node.getDrawTo() != null)
        {
            node.getDrawTo().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPosX() != null)
        {
            node.getPosX().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPosY() != null)
        {
            node.getPosY().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outADrawabsPenfct(node);
    }

    public void inADrawPenfct(ADrawPenfct node)
    {
        defaultIn(node);
    }

    public void outADrawPenfct(ADrawPenfct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADrawPenfct(ADrawPenfct node)
    {
        inADrawPenfct(node);
        if(node.getDraw() != null)
        {
            node.getDraw().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getDistX() != null)
        {
            node.getDistX().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDistY() != null)
        {
            node.getDistY().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outADrawPenfct(node);
    }

    public void inASetcolorPenfct(ASetcolorPenfct node)
    {
        defaultIn(node);
    }

    public void outASetcolorPenfct(ASetcolorPenfct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetcolorPenfct(ASetcolorPenfct node)
    {
        inASetcolorPenfct(node);
        if(node.getSetColor() != null)
        {
            node.getSetColor().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASetcolorPenfct(node);
    }

    public void inASetwidthPenfct(ASetwidthPenfct node)
    {
        defaultIn(node);
    }

    public void outASetwidthPenfct(ASetwidthPenfct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetwidthPenfct(ASetwidthPenfct node)
    {
        inASetwidthPenfct(node);
        if(node.getSetWidth() != null)
        {
            node.getSetWidth().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASetwidthPenfct(node);
    }

    public void inADecls(ADecls node)
    {
        defaultIn(node);
    }

    public void outADecls(ADecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecls(ADecls node)
    {
        inADecls(node);
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        outADecls(node);
    }

    public void inAFctDecl(AFctDecl node)
    {
        defaultIn(node);
    }

    public void outAFctDecl(AFctDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFctDecl(AFctDecl node)
    {
        inAFctDecl(node);
        if(node.getFctdecl() != null)
        {
            node.getFctdecl().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outAFctDecl(node);
    }

    public void inAVariableDecl(AVariableDecl node)
    {
        defaultIn(node);
    }

    public void outAVariableDecl(AVariableDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDecl(AVariableDecl node)
    {
        inAVariableDecl(node);
        if(node.getVardecl() != null)
        {
            node.getVardecl().apply(this);
        }
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        outAVariableDecl(node);
    }

    public void inAVardecl(AVardecl node)
    {
        defaultIn(node);
    }

    public void outAVardecl(AVardecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecl(AVardecl node)
    {
        inAVardecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAVardecl(node);
    }

    public void inAFunctionFctdecl(AFunctionFctdecl node)
    {
        defaultIn(node);
    }

    public void outAFunctionFctdecl(AFunctionFctdecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionFctdecl(AFunctionFctdecl node)
    {
        inAFunctionFctdecl(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAFunctionFctdecl(node);
    }

    public void inASketchFctdecl(ASketchFctdecl node)
    {
        defaultIn(node);
    }

    public void outASketchFctdecl(ASketchFctdecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASketchFctdecl(ASketchFctdecl node)
    {
        inASketchFctdecl(node);
        if(node.getSketch() != null)
        {
            node.getSketch().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outASketchFctdecl(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        {
            List<PAdditionalParam> copy = new ArrayList<PAdditionalParam>(node.getAdditionalParams());
            for(PAdditionalParam e : copy)
            {
                e.apply(this);
            }
        }
        outAParams(node);
    }

    public void inAAdditionalParam(AAdditionalParam node)
    {
        defaultIn(node);
    }

    public void outAAdditionalParam(AAdditionalParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalParam(AAdditionalParam node)
    {
        inAAdditionalParam(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAAdditionalParam(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParam(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALtExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGtExp(node);
    }

    public void inASimpleExp(ASimpleExp node)
    {
        defaultIn(node);
    }

    public void outASimpleExp(ASimpleExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        inASimpleExp(node);
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        outASimpleExp(node);
    }

    public void inAAddSum(AAddSum node)
    {
        defaultIn(node);
    }

    public void outAAddSum(AAddSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddSum(AAddSum node)
    {
        inAAddSum(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddSum(node);
    }

    public void inASubSum(ASubSum node)
    {
        defaultIn(node);
    }

    public void outASubSum(ASubSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubSum(ASubSum node)
    {
        inASubSum(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubSum(node);
    }

    public void inADivSum(ADivSum node)
    {
        defaultIn(node);
    }

    public void outADivSum(ADivSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivSum(ADivSum node)
    {
        inADivSum(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivSum(node);
    }

    public void inAMulSum(AMulSum node)
    {
        defaultIn(node);
    }

    public void outAMulSum(AMulSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulSum(AMulSum node)
    {
        inAMulSum(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMulSum(node);
    }

    public void inASimpleSum(ASimpleSum node)
    {
        defaultIn(node);
    }

    public void outASimpleSum(ASimpleSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSum(ASimpleSum node)
    {
        inASimpleSum(node);
        if(node.getNeg() != null)
        {
            node.getNeg().apply(this);
        }
        outASimpleSum(node);
    }

    public void inANotNeg(ANotNeg node)
    {
        defaultIn(node);
    }

    public void outANotNeg(ANotNeg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNeg(ANotNeg node)
    {
        inANotNeg(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotNeg(node);
    }

    public void inATermNeg(ATermNeg node)
    {
        defaultIn(node);
    }

    public void outATermNeg(ATermNeg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermNeg(ATermNeg node)
    {
        inATermNeg(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermNeg(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAVarTerm(node);
    }

    public void inABoolTerm(ABoolTerm node)
    {
        defaultIn(node);
    }

    public void outABoolTerm(ABoolTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTerm(ABoolTerm node)
    {
        inABoolTerm(node);
        if(node.getBoole() != null)
        {
            node.getBoole().apply(this);
        }
        outABoolTerm(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParTerm(node);
    }

    public void inAColorTerm(AColorTerm node)
    {
        defaultIn(node);
    }

    public void outAColorTerm(AColorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColorTerm(AColorTerm node)
    {
        inAColorTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRed() != null)
        {
            node.getRed().apply(this);
        }
        if(node.getComma1() != null)
        {
            node.getComma1().apply(this);
        }
        if(node.getGreen() != null)
        {
            node.getGreen().apply(this);
        }
        if(node.getComma2() != null)
        {
            node.getComma2().apply(this);
        }
        if(node.getBlue() != null)
        {
            node.getBlue().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAColorTerm(node);
    }

    public void inAMathfctsTerm(AMathfctsTerm node)
    {
        defaultIn(node);
    }

    public void outAMathfctsTerm(AMathfctsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMathfctsTerm(AMathfctsTerm node)
    {
        inAMathfctsTerm(node);
        if(node.getMathfcts() != null)
        {
            node.getMathfcts().apply(this);
        }
        outAMathfctsTerm(node);
    }

    public void inACallTerm(ACallTerm node)
    {
        defaultIn(node);
    }

    public void outACallTerm(ACallTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallTerm(ACallTerm node)
    {
        inACallTerm(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACallTerm(node);
    }

    public void inATrueBoole(ATrueBoole node)
    {
        defaultIn(node);
    }

    public void outATrueBoole(ATrueBoole node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBoole(ATrueBoole node)
    {
        inATrueBoole(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBoole(node);
    }

    public void inAFalseBoole(AFalseBoole node)
    {
        defaultIn(node);
    }

    public void outAFalseBoole(AFalseBoole node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBoole(AFalseBoole node)
    {
        inAFalseBoole(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBoole(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAColorType(AColorType node)
    {
        defaultIn(node);
    }

    public void outAColorType(AColorType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColorType(AColorType node)
    {
        inAColorType(node);
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        outAColorType(node);
    }

    public void inAArgs(AArgs node)
    {
        defaultIn(node);
    }

    public void outAArgs(AArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        inAArgs(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        {
            List<PAdditionalArg> copy = new ArrayList<PAdditionalArg>(node.getAdditionalArg());
            for(PAdditionalArg e : copy)
            {
                e.apply(this);
            }
        }
        outAArgs(node);
    }

    public void inAAdditionalArg(AAdditionalArg node)
    {
        defaultIn(node);
    }

    public void outAAdditionalArg(AAdditionalArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalArg(AAdditionalArg node)
    {
        inAAdditionalArg(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAAdditionalArg(node);
    }

    public void inAArg(AArg node)
    {
        defaultIn(node);
    }

    public void outAArg(AArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        inAArg(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAArg(node);
    }

    public void inAPowerMathfcts(APowerMathfcts node)
    {
        defaultIn(node);
    }

    public void outAPowerMathfcts(APowerMathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowerMathfcts(APowerMathfcts node)
    {
        inAPowerMathfcts(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBase() != null)
        {
            node.getBase().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpos() != null)
        {
            node.getExpos().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPowerMathfcts(node);
    }

    public void inARound5Mathfcts(ARound5Mathfcts node)
    {
        defaultIn(node);
    }

    public void outARound5Mathfcts(ARound5Mathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARound5Mathfcts(ARound5Mathfcts node)
    {
        inARound5Mathfcts(node);
        if(node.getRoundfive() != null)
        {
            node.getRoundfive().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValeur() != null)
        {
            node.getValeur().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARound5Mathfcts(node);
    }

    public void inARound10Mathfcts(ARound10Mathfcts node)
    {
        defaultIn(node);
    }

    public void outARound10Mathfcts(ARound10Mathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARound10Mathfcts(ARound10Mathfcts node)
    {
        inARound10Mathfcts(node);
        if(node.getRoundten() != null)
        {
            node.getRoundten().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValeur() != null)
        {
            node.getValeur().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARound10Mathfcts(node);
    }

    public void inARound100Mathfcts(ARound100Mathfcts node)
    {
        defaultIn(node);
    }

    public void outARound100Mathfcts(ARound100Mathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARound100Mathfcts(ARound100Mathfcts node)
    {
        inARound100Mathfcts(node);
        if(node.getRoundhund() != null)
        {
            node.getRoundhund().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValeur() != null)
        {
            node.getValeur().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outARound100Mathfcts(node);
    }

    public void inALogMathfcts(ALogMathfcts node)
    {
        defaultIn(node);
    }

    public void outALogMathfcts(ALogMathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogMathfcts(ALogMathfcts node)
    {
        inALogMathfcts(node);
        if(node.getLog() != null)
        {
            node.getLog().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getBase() != null)
        {
            node.getBase().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLogde() != null)
        {
            node.getLogde().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outALogMathfcts(node);
    }

    public void inASinMathfcts(ASinMathfcts node)
    {
        defaultIn(node);
    }

    public void outASinMathfcts(ASinMathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinMathfcts(ASinMathfcts node)
    {
        inASinMathfcts(node);
        if(node.getSin() != null)
        {
            node.getSin().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAngle() != null)
        {
            node.getAngle().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASinMathfcts(node);
    }

    public void inACosMathfcts(ACosMathfcts node)
    {
        defaultIn(node);
    }

    public void outACosMathfcts(ACosMathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACosMathfcts(ACosMathfcts node)
    {
        inACosMathfcts(node);
        if(node.getCos() != null)
        {
            node.getCos().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAngle() != null)
        {
            node.getAngle().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACosMathfcts(node);
    }

    public void inATanMathfcts(ATanMathfcts node)
    {
        defaultIn(node);
    }

    public void outATanMathfcts(ATanMathfcts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATanMathfcts(ATanMathfcts node)
    {
        inATanMathfcts(node);
        if(node.getTan() != null)
        {
            node.getTan().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAngle() != null)
        {
            node.getAngle().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATanMathfcts(node);
    }
}
