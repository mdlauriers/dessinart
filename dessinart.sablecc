Package dessinart.syntax;

Helpers
    char = [32..126]; // all chars
    digit = ['0'..'9'];
    eol = 13 | 10 | 13 10; // end of line.
    letter = [['a'..'z']+['A'..'Z']];
    string_char = [[32..126] - '"'] | '"' '"';

Tokens
    // Operator tokens.
    assign = '=';
    divide = '/';
    l_br = '{';
    l_par = '(';
    mod = '%';
    minus = '-';
    plus = '+';
    r_br = '}';
    r_par = ')';
    star = '*';
    sc = ';';
    comma = ',';
    dot = '.';
    not = '!';

    eq = '==';
    lt = '<';
    gt = '>';

    // General keywords.
    do = 'do';
    end = 'end';
    for = 'for';
    while = 'while';

    false = 'false';
    true = 'true';

    elif = 'elif';
    if = 'if';
    then = 'then';

    return = 'return';

    // Language specific keywords.
    canvas = 'canvas';
    pencil = 'pencil';
    color = 'color';
    define = 'define';
    import = 'import';
    dessinart = 'dessinart';
    sketch = 'sketch';
    func = 'func';
    int = 'int';
    double = 'double';
    boolean = 'boolean';

    // Language specific functions
    replace = 'replace';
    move = 'move';
    draw = 'draw';
    draw_to = 'drawTo';
    set_color = 'setColor';
    set_width = 'setWidth';
    wait = 'wait';
    power = 'power';
    roundfive = 'roundFive';
    roundten = 'roundTen';
    roundhund = 'roundHundred';

    randomdeuxcinqcinq = 'random255';
    randomcent = 'random100';
    randomdix = 'random10';

    sin = 'sin';
    cos = 'cos';
    tan = 'tan';
    log = 'log';

    // Identifier tokens.
    blank = (' ' | eol | 9)+;
    comment = '//' char* eol;
    comment_multi = '/*' char* '*/' eol;
    ident = letter(letter | digit)*;
    number = digit+;


    //filename = char+ dot? char*;

Ignored Tokens
     blank, comment, comment_multi;


Productions
    program = defs main decls;

    defs = defcan defpen;

    defcan = define canvas l_par [width]:number comma [height]:number r_par sc;

    // ajouter gestion de conflit avec les fonctions standards du language
    defpen = define pencil l_par [width]:number [comma1]:comma [posx]:number [comma2]:comma [posy]:number r_par sc;

    main = dessinart l_br block r_br;

    block = [instrs]:instr*;

	//exp contient call
    instr =
    	{decl} type ident assign exp sc |
    	{assign} ident assign exp sc |
    	{penfct} penfct sc |
    	{if} if l_par exp r_par l_br block r_br |
    	{while} while l_par exp r_par l_br block r_br |
    	{return} return exp? sc |
    	{call} ident l_par args? r_par sc;

    penfct =
    	{replace} replace l_par [pos_x]:exp comma [pos_y]:exp r_par |
    	{move} move l_par [dist_x]:exp comma [dist_y]:exp r_par |
    	{drawabs} draw_to l_par [pos_x]:exp comma [pos_y]:exp r_par |
    	{draw} draw l_par [dist_x]:exp comma [dist_y]:exp r_par |
    	{setcolor} set_color l_par [color]:exp r_par |
    	{setwidth} set_width l_par [width]:exp r_par |
    	{wait} wait l_par [delay]:exp r_par;

    decls = decl*;

    decl =
    	{fct} fctdecl |
    	{variable} vardecl sc;

    vardecl = type ident assign exp;

    fctdecl =
    	{function} func [return_type]:type [name]:ident l_par params? r_par l_br block r_br |
    	{sketch} sketch [name]:ident l_par params? r_par l_br block r_br;


   	params =
    	param [additional_params]:additional_param*;

  	additional_param =
    	comma param;

  	param =
    	type [name]:ident;

    exp =
        {eq} [left]:exp eq [right]:sum |
        {lt} [left]:exp lt [right]:sum |
        {gt} [left]:exp gt [right]:sum |
        {simple} sum;

    sum =
        {add} [left]:sum plus [right]:neg |
        {sub} [left]:sum minus [right]:neg |
        {div} [left]:sum divide [right]:neg |
        {mul} [left]:sum star [right]:neg |
        {mod} [left]:sum mod [right]:neg |
        {simple} neg;

    neg =
        {not} not [exp]:neg |
        {term} term;

    term =
        {number} number |
        {negative} minus number |
        {var} ident |
        {bool} boole |
        {par} l_par exp r_par |
        {color} l_par [red]:exp [comma1]:comma [green]:exp [comma2]:comma [blue]:exp r_par |
        {mathfcts} mathfcts |
        {call} ident l_par args? r_par;

	boole =
		{true} true |
		{false} false;

    type =
        {int} int |
        {boolean} boolean |
        {color} color;

    args =
        arg [additional_arg]:additional_arg*;

    additional_arg =
        comma arg;

    arg =
        exp;

    mathfcts =
    	{power} power l_par [base]:exp comma [expos]:exp r_par |
    	{round5} roundfive l_par [valeur]:exp r_par |
    	{round10} roundten l_par [valeur]:exp r_par |
    	{round100} roundhund l_par [valeur]:exp r_par |
    	{log} log l_par [base]:exp comma [logde]:exp r_par |
    	{sin} sin l_par [mul]:exp comma [angle]:exp r_par |
    	{cos} cos l_par [mul]:exp comma [angle]:exp r_par |
    	{tan} tan l_par [mul]:exp comma [angle]:exp r_par |
    	{randomdeuxcinqcinq} randomdeuxcinqcinq l_par r_par |
    	{randomhund} randomcent l_par r_par |
    	{randomten} randomdix l_par r_par;
