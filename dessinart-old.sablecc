Package dessinart.syntax;

Helpers
    char = [32..126]; // all chars
    digit = ['0'..'9'];
    eol = 13 | 10 | 13 10; // end of line.
    letter = [['a'..'z']+['A'..'Z']];
    string_char = [[32..126] - '"'] | '"' '"';

Tokens
    // Operator tokens.
    assign = '=';
    divide = '/';
    l_br = '{';
    l_par = '(';
    minus = '-';
    plus = '+';
    r_br = '}';
    r_par = ')';
    star = '*';
    sc = ';';
    comma = ',';
    dot = '.';


    // Identifier tokens.
    blank = (' ' | eol | 9)+;
    comment = '//' char* eol;
    commentMulti = '/*' char* '*/' eol;
    ident = letter(letter | digit)*;
    number = digit+;

    // General keywords.
    do = 'do';
    end = 'end';
    for = 'for';
    while = 'while';

    false = 'false';
    true = 'true';

    elif = 'elif';
    if = 'if';
    then = 'then';

    return = 'return';

    // Language specific keywords.
    canvas = 'canvas';
    pencil = 'pencil';
    color = 'color';
    define = 'define';
    import = 'import';
    dessinart = 'dessinart';
    sketch = 'sketch';
    func = 'func';
    int = 'int';
    double = 'double';
    boolean = 'boolean';

    // Language specific functions
    replace = 'replace';
    move = 'move';
    draw = 'draw';
    drawTo = 'drawTo';
    setColor = 'setColor';
    setWidth = 'setWidth';
    power = 'power';
    round = 'round';
    ceil = 'ceil';
    floor = 'floor';
    sin = 'sin';
    cos = 'cos';
    tan = 'tan';
    intToDouble = 'intToDouble';
    exec = '$exec';
    lib = '$lib';

    filename = char+ dot? char*;

Ignored Tokens
    blank, comment, commentMulti;


Productions
    program = [instrs]:instr*;

    functiondecl =
        {fun} fun [name]:ident l_par args r_par do block end |
        {procedure} procedure [name]:ident l_par args r_par do block end;


    args =
        {multiple} ident* |
        {simple} ident;

    instr =
        {decl} var ident assign exp sc |
        {assign} ident assign exp sc |
        {if} if exp l_br block r_br |
        {while} while l_par exp r_par do l_br block r_br |
        {return} return exp? sc |
        {call} ident l_par exp* r_par sc;

    exp =
        {eq} [left]:exp eq [right]:sum |
        {lt} [left]:exp lt [right]:sum |
        {gt} [left]:exp gt [right]:sum |
        {simple} sum;

    sum =
        {add} [left]:sum plus [right]:neg |
        {sub} [left]:sum minus [right]:neg |
        {simple} neg;


    neg =
        {not} not [exp]:neg |
        {term} term;

    term =
        {number} number |
        {var} ident |
        {true} true |
        {false} false |
        {par} l_par exp r_par |
        {string} string |
        {call} ident l_par exp r_par;

    filetype =
        {exec} exec sc |
        {lib} lib sc;

    def =
        {canvas} define canvas l_par [width]:number comma [height]:number r_par sc |
        {pencil} define pencil l_par [width]:number comma [posx]:number comma [posy]:number r_par sc;

    imp = import filename sc;

    drawFunctions =
        {replace} replace l_par [posx]:*** comma [posy]:*** r_par sc |
        {move} move l_par [posx]:*** comma [posy]:*** r_par sc |
        {draw} draw l_par [posx]:*** comma [posy]:*** r_par sc |
        {drawTo} drawTo l_par [posx]:*** comma [posy]:*** r_par sc |
        {setColor} setColor l_par color*** r_par sc |
        {setWidth} setWidth l_par number r_par sc;


    mathFunctions =
        {power} power l_par type*** r_par sc |
        {round} round l_par double** r_par sc |
        {ceil} ceil l_par double*** r_par sc |
        {floor} floor l_par floor*** r_par sc |
        {sin} sin l_par type*** r_par sc |
        {cos} cos l_par type*** r_par sc |
        {tan} tan l_par type*** r_par sc |
        {intToDouble} intToDouble l_par number* r_par sc;



